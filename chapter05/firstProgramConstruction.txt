Chapter 5 : A first simple program

Simple Dot Com Game


New concepts to introduce:

OPERATORS

FOR LOOPS

RANDOM NUMBER GENERATION

CASTING (turn a String into an int)

HOW TO WRITE A PROGRAM (a game)


How to write a program

-----------------------

Summary:
Create a command-line interface game in the style of Battleship, where the player attempts to guess the location and sink three hidden 3-space DotComs randomly arranged on a 7 by 7 grid, with individual cells indicated by a letter-number code (A-G vertical, 0-6 horizontal). Game's responses to player guesses are "miss", "hit", and "kill" (all three cells of a DotCom are hit for a kill).

-----------------------

Game Flow:
1. User starts a new game
  a. Game creates three DotComs
  b. Game places the DotComs randomly on a virtual grid

2. Game play begins, repeat until no more DotCom cells are left:
  a. Prompt user for a guess (A1, C5, etc)
  b. Check user guess against populated grid for miss (empty cell), hit (cells remaining for that DotCom), kill (no cells remaining for that DotCom)
  c. Check for any remaining DotComs (yes? continue, no? game over)

3. Game finishes
  a. Give user a score/rating based on number of guesses needed to sink all DotComs

-----------------------

Create Flow Chart of game flow process:
  start, actions and conditional decisions, end
  (see GoogleDocs screen shot of flow chart)

-----------------------

Start with a very simple (MVP) game, using a single row (instead of a grid), and one DotCom (not three).
This will allow you to focus on working out the basics first, before making it more complicated.

-----------------------

Start pseudo-coding by determining all the Objects needed (NOT the Procedures):
a Game class
a DotCom class

SimpleDotComGame
  void main 

SimpleDotCom 
  int[] locationCells
  int numOfHits
  ---
  String checkYourself(String guess)
  void setLocationCells(int[] loc)

-----------------------

Don't make it more complicated than it needs to be.

For example, you don't need to build an array of 7 ints to represent the whole row,
and then assign a DotCom to three of those seven;
you only need an array that holds the three cells the DotCom occupies.

-----------------------

1. GAME STARTS and creates one DotCom (new object) and gives it a location on three consecutive cells out of seven (cells 0-6).

2. GAME PLAY BEGINS and game prompts user for a guess, then checks for a hit on any DotCom cells.
If a hit, increment numOfHits variable.

3. GAME FINISHES when all three cells of the DotCom have been hit (test: numOfHits var value is 3), and game tells user how many guesses it took to sink the DotCom.

-----------------------

SAMPLE INTERACTION

enter a number: 2
hit
enter a number: 3
hit
enter a number: 4
miss
enter a number: 1
kill
You took 4 guesses

-----------------------

DEVELOPING A CLASS (one approach)

1.  Figure out what the class should do.

2.  List the Instance Variables and Methods it needs.

3.  Write pseudocode as a framework to develop actual code around.

4.  Write Tests for the Methods. (before there's even written code to test!)

5.  Implement the Class. (write some production code) 

6.  Test the Methods.

7.  Debug and re-implement as needed.

8.  Have someone else look at your code.

Writing test code before you write your actual code helps you clarify how to write the clearest, most concise code to get the result you want by keeping the end result in mind (what you want and what you don't want, and how to prevent getting results you don't want).

Write a little test, then write the bit of code that you will test with it, then run the test.
Then write another test and write a little bit more code for it, then run all code with both tests.
At each iteration, always run all the previous tests to make sure new code doesn't break any old tests.



-----------------------

PREP CODE - a type of pseudocode to help you focus on logic without worrying about syntax.

TEST CODE - Classes and Methods that will stress test real code.

REAL CODE - Actual production code.

-----------------------

PREP CODE example

half-Java, half-plain English, usually contains three parts:
- Instance Variable declarations
- Method declarations
- Method logic (most important)

-----------------------

Extreme Programming (XP), an Agile software development philosophy

- small, frequent releases
- develop in iteration cycles
- don't include anything that's not in the spec 
- write test code first 
- no killer schedules; work regular hours 
- refactor code whenever and wherever possible
- don't release anything until it passes all tests 
- set realistic schedules based around small releases
- keep it simple
- program in pairs, and move people around so everyone knows everything about all the code 

-----------------------

FOR LOOPS and WHILE LOOPS

FOR LOOPS should always be used when you know the number of loops that need to be executed.
(because FOR LOOPS are less computationally expensive than WHILE LOOPS...memory allocation).
WHILE LOOPS are used when an action needs to continue as long as some condition is TRUE.

WHILE LOOP: keeps repeating as long as a condition is true (like repeating IF/ELSE conditional),
useful for when you don't have a specific number of loops to use in a FOR LOOP.
    while ( condition == true ) { // then keep doing this stuff over and over }

ENHANCED FOR LOOP: shorthand for loop, (like a JS "FOR IN" LOOP, uses : instead of in)
define a named parameter variable and the variable holding an array of elements to loop over.
    "for each cell in locationCells"
    for (int cell : locationCells) { // stuff to do on each cell }

REGULAR FOR LOOP: defines a specific number of times to loop, 
based on the number of things that exist to loop over.
    for (int i=0;i<10;i++){ // do something 10 times }

-----------------------

The pieces of a (regular) FOR LOOP

for () {} - a for loop expression

int i = 0; - initialization (initializing the iterator variable)
Also note that more than one loop variable can be initialized (more on that later).

i < 10; - boolean test (is this statement true? if yes, do a loop. if not, stop looping).
Think of this as "WHILE", and a WHILE LOOP just containing this test section for any boolean condition.

i++ - iteration expression. increment the iterator "i" by 1 on each pass of the loop.
This section contains (simple) things you want to happen AFTER each loop.
(Put the complicated stuff in the { loop code block } itself whenever possible).

NOTE that instead of hard coding a number into the boolen test (i < 10),
you can insert an external variable who's (whole integer) number may change (i < x).

Same/same with "i = 0" if you need to do "i = y" for some reason.

-----------------------

TWO WAYS TO WRITE THE SAME LOOP

for (int i = 0; i < 8; i++ ) {
  System.out.println(i);
}
System.out.println("done");

OR 

int i = 0;
while ( i < 8 ) {
  System.out.println(i);
  i++;
}
System.out.println("done");

FOR LOOP makes it more compact if the loops are based on a known number.
WHILE LOOP makes it more compact and flexible if it is a conditional test.

-----------------------

Increments and Decrements

x++;
SAME AS 
x = x + 1;

x--;
SAME AS 
x = x - 1;

BUT, putting the increment operators BEFORE the variable means
FIRST increment the value of the variable, THEN use the new value of the variable.

int x = 0;
// at first, x == 0
int z = ++x; // x is incremented BEFORE its value is assigned to z
// then x is incremented (x == 1), and
// then z is set to value of x (z == 1)

BUT...

int x = 0;
// at first, x == 0
int z = x++; // x is incremented AFTER its value is assigned to z
// then z is set of value of x (z == 0), and
// then x is incremented (x == 1)


-----------------------

