Chapter 5 : A first simple program

Simple Dot Com Game


New concepts to introduce:

OPERATORS

FOR LOOPS

RANDOM NUMBER GENERATION

CASTING (turn a String into an int)

HOW TO WRITE A PROGRAM (a game)


How to write a program

-----------------------

Summary:
Create a command-line interface game in the style of Battleship, where the player attempts to guess the location and sink three hidden 3-space DotComs randomly arranged on a 7 by 7 grid, with individual cells indicated by a letter-number code (A-G vertical, 0-6 horizontal). Game's responses to player guesses are "miss", "hit", and "kill" (all three cells of a DotCom are hit for a kill).

-----------------------

Game Flow:
1. User starts a new game
  a. Game creates three DotComs
  b. Game places the DotComs randomly on a virtual grid

2. Game play begins, repeat until no more DotCom cells are left:
  a. Prompt user for a guess (A1, C5, etc)
  b. Check user guess against populated grid for miss (empty cell), hit (cells remaining for that DotCom), kill (no cells remaining for that DotCom)
  c. Check for any remaining DotComs (yes? continue, no? game over)

3. Game finishes
  a. Give user a score/rating based on number of guesses needed to sink all DotComs

-----------------------

Create Flow Chart of game flow process:
  start, actions and conditional decisions, end
  (see GoogleDocs screen shot of flow chart)

-----------------------

Start with a very simple (MVP) game, using a single row (instead of a grid), and one DotCom (not three).
This will allow you to focus on working out the basics first, before making it more complicated.

-----------------------

Start pseudo-coding by determining all the Objects needed (NOT the Procedures):
a Game class
a DotCom class

SimpleDotComGame
  void main 

SimpleDotCom 
  int[] locationCells
  int numOfHits
  ---
  String checkYourself(String guess)
  void setLocationCells(int[] loc)

-----------------------

Don't make it more complicated than it needs to be.

For example, you don't need to build an array of 7 ints to represent the whole row,
and then assign a DotCom to three of those seven;
you only need an array that holds the three cells the DotCom occupies.

-----------------------

1. GAME STARTS and creates one DotCom (new object) and gives it a location on three consecutive cells out of seven (cells 0-6).

2. GAME PLAY BEGINS and game prompts user for a guess, then checks for a hit on any DotCom cells.
If a hit, increment numOfHits variable.

3. GAME FINISHES when all three cells of the DotCom have been hit (test: numOfHits var value is 3), and game tells user how many guesses it took to sink the DotCom.

-----------------------

SAMPLE INTERACTION

enter a number: 2
hit
enter a number: 3
hit
enter a number: 4
miss
enter a number: 1
kill
You took 4 guesses

-----------------------

DEVELOPING A CLASS (one approach)

1.  Figure out what the class should do.

2.  List the Instance Variables and Methods it needs.

3.  Write pseudocode as a framework to develop actual code around.

4.  Write Tests for the Methods.

5.  Implement the Class. 

6.  Test the Methods.

7.  Debug and re-implement as needed.

8.  Have someone else look at your code.

-----------------------

PREP CODE - a type of pseudocode to help you focus on logic without worrying about syntax.

TEST CODE - Classes and Methods that will stress test real code.

REAL CODE - Actual production code.

-----------------------

PREP CODE example

half-Java, half-plain English, usually contains three parts:
- Instance Variable declarations
- Method declarations
- Method logic (most important)



