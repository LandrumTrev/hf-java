Instance Variable values (state) interact with Methods (behaviors)

A Method can test (if/else, switch/case, etc.) the value of an Instance Variable
in order to determine how the Method will function and/or what value it will return.

------------------------------------------------

PASSING ARGUMENT DATA INTO A METHOD'S PARAMETERS

A method's Caller can pass Arguments (values) into the waiting Parameters (internal variables)
of that method.

As always, the Type of data accepted by the Parameter must be declared, and the Argument data
passed into the Parameter must match its type.


void meth1(String param1, int param2) {
  System.out.println(param1 + " of " + param2);
}

obj1.meth1("value!", 42);
// pass values literally

String v1 = "even more value!";
int v2 = 93;
obj2.meth1(v1, v2);
// or pass variables containing values

NOTE: if you pass primitive values as literals or variables, these are COPIES
that do not affect the original (external to the method) values of those variables.

HOWEVER if you are passing object references, since those are just references that point to
independent objects, the behavior inside the method WILL affect the external object referenced.

------------------------------------------------

METHOD RETURN values

A Method's return value must always be declared;
if there is no data returned from the method, its return value is "void"

void meth2() { ... }

But if you want to return a value from a method, simply declare it's data type,
just like declaring the data type of a variable.

The return value must match (or be compatible with) the declared type.
(See Polymorphism)

And use the "return" keyword before the value returned by (at the end of) a method.
NOTE that no code after "return" will run, so put "return" at the end.

int meaningOfLife() {
  return 42;
}

NOTE: nothing in Java requires that you actually USE a return value for anything;
you could simply use a return value for testing purposes without using it in functional code.

------------------------------------------------

RETURN MULTIPLE VALUES FROM A METHOD

A method can only return a single value, but you can easily bundle multiple values
into a data structure such as an Array (ArrayList, Set, Tree, Map, etc.)
in order to return multiple values as a single method "return" value.

------------------------------------------------

GETTERS and SETTERS 
(aka Accessors and Mutators)

Getter and Setters are specialized types of methods whose purpose in life it to...
you guessed it, Get and Set the value of Instance Variables.

The formal naming convention is to name getters and setters with "get" and "set"
prefixed to the name of the Instance Variable that they get and set; pretty straightforward.

int numberOfDogs = 0; // the variable to get and set
int getNumberOfDogs() { ... } // the getter
void setNumberOfDogs() { ... } // the setters

Getters usually have a return value, so that return value can be placed into a variable.
Setters usually have no return value (void), since they are doing their thing internally.


class ElectricGuitar {

  String brand;
  int numOfPickups;
  boolean rockStarUsesIt;

  String getBrand() {
    return brand;
  }

  void setBrand(String aBrand) {
    brand = aBrand;
  }

  int getNumOfPickups() {
    return numOfPickups;
  }

  void setNumOfPickups(int num) {
    numOfPickups = num;
  }

  boolean getRockStarUsesIt() {
    return rockStarUsesIt;
  }

  void setRockStarUsesIt(boolean yesOrNo) {
    rockStarUsesIt = yesOrNo;
  }
  
}

------------------------------------------------


ENCAPSULATION

Encapsulation is the use of marking instance variables and methods with either
"public" or "private" in order to protect variable data from undesired input.

Primarily the "main" method of a class and any needed Getters and Setters
would be marked "public" and all instance variables would be marked "private",
the private instance variables requiring a Getter and Setter to access their values.

Using the intermediary of public Getters and Setters on private variables is best practice
in all cases, even if the Setter is not currently "doing anything", i.e.,
performing a security check (with a RegEx, etc.), or limiting numeric input to a certain range, etc.
because it allows you to change your mind later and add a test, restriction, etc.
inside an existing Setter without breaking anyone elses code in the way they access the object's data.
Their code would only break if they were inputting undesired data (hackers? noobs? clueless users?)
which is something you want to stop anyway--you only break code that you want to break.

The miniscule performance hit of adding getters and setters is negligible, and the trade off is
much tighter security and functional insurance, which is probably why you're using Java to begin with.

theCat.height = 27;
// exposed (public) variable can be set like this

theCat.height = 0;
// but allows Bad Things like this to happen

// so you need something like this
// which only lets a .height of at least 9 to be set 
public void setHeight(int ht) {
  if (ht > 9) {
    height = ht;
  }
}

SO IN YOUR OBJECT CLASS DO SOMETHING LIKE THIS:

  private int size;

  public int getSize() {
    return size;
  }

  public void setSize(int s) {
    size = s;
  }

AND THEN IN THE TEST OR CALLING CLASS DO THIS:

  GoodDog one = new GoodDog();
  one.setSize(70);
  // instead of one.size = 70;

  System.out.println("Dog one: " + one.getSize());


ANYWHERE THAT YOU WOULD USE A LITERAL VALUE OR A VARIABLE NAME,
YOU CAN USE A GETTER OR SETTER METHOD CALL INSTEAD:

// instead of
int x = 3 + 24;

// or
int x = 3 + one.size;

// use
int x = 3 + one.getSize();

------------------------------------------------

GETTING AND SETTING VALUE INSIDE AN Array

Works pretty much how you think it would:

// create an instance variable to hold an array of Dog objects
Dog[] pets;

// assign that variable name an object which is an array of 7 Dog object slots
pets = new Dog[7];

// fill the first two array elements with Dog objects
pets[0] = new Dog();
pets[1] = new Dog();

// and use the objects' array element index to get/set those Dog objects
pets[0].setSize(30);
int x = pets[0].getSize();

------------------------------------------------

INSTANCE VARIABLE DEFAULT VALUES

So you can declare AND initialize (assign it a value) an instance variable at the same time:

int size = 42;
String name = "Zaphod Beeblebrox";

...but what is the default value of an UNINITIALIZED instance variable?

int size;
String name;

DEPENDS ON THE VARIABLE'S TYPE:

integer types: 0
floating points: 0.0
booleans: false
references: null

------------------------------------------------

INSTANCE VARIABLES vs LOCAL VARIABLES


INSTANCE VARIABLES are those declared inside a Class,
but not within a Method. They coexist at the same level as Methods,
and are usually (alwasy?) declared before Method definitions.

Uninitialized Instance Variables have as-is usable values (see list above).


LOCAL VARIABLES are those declared inside a Method,
and include a Method's parameter(s) if present, which are just 
local variables that are defined on the fly by outside callers of the method.

However... Local Variable MUST be initialized with a value before they are used!
You CANNOT rely on the same default values (above) that uninitialized Instance Variables have.


class AddThing {
  int a; // instance variable (default value 0)
  int b = 12; // instance variable, initialized value 12

  public int add() {
    int total = a + b; // total is a local variable
    // okay, because as an instance variable, "a" has a default value of 0
    return total;
  }
}

BUT...

class Foo {
  public void go() {
    int x; // UNINITIALIZED LOCAL VARIABLE...
    int z = x + 3; // COMPILER WILL FREAK OUT b/c LOCAL x NOT INITIALIZED 
    // so, here "x" will not have the default value 0 like an instance variable would 
  }
}

------------------------------------------------

COMPARING VARIABLES (primitives or references)

== will tell you if two primitive values are the same, and
== will also tell you if two references point to the SAME object.

But... if you want to know if TWO DIFFERENT OBJECTS are "equal",
.equals() method will give you that.

However... what "equal" means depends on what kind of object it is.
Two String objects that have the same characters? Sure, .equal() no problem.

But two Dog objects being equal because they have the same weight? Maybe not.
This issue will be tackled in later chapters.

Specific type doesn't matter to == as long as the values are the same:

int a = 3;
byte b = 3;
if (a == b) // true

and for object references:

Foo a = new Foo();
Foo b = new Foo();
Foo c = a;
if (a == b) // false
if (a == c) // true
if (b == c) // false

------------------------------------------------








